/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk.model


import com.squareup.moshi.Json

/**
 * 
 *
 * @param id The unique identifier for the transaction entity.
 * @param status Transaction status in Blockchain. Can be pending, success or fail
 * @param from Address of the sender of the transaction.
 * @param to Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction.
 * @param contractId Contract ID the transaction is associated with.
 * @param contractAddress Contract address where the transaction happened.
 * @param blockchain Main blockchain identifier: Ethereum, Polygon, etc.
 * @param chainName Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc.
 * @param chainId Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc.
 * @param environment Chain environment: Testnet, Mainnet, etc.
 * @param transactionHash Unique transaction hash in the blockchain.
 * @param blockNumber Unique block number in the blockchain.
 * @param type Transaction type: Mint, Transfer, Award, Airdrop, etc.
 * @param method Function method name that was called in smart contract
 * @param events List of events that were emitted in the transaction
 * @param projectId The unique identifier of the project that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting.
 * @param collectionId The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting.
 * @param accountId The unique identifier of the account that the transaction belongs to.
 * @param createdOn The date when the collection was created.
 * @param modifiedOn The date when the collection was last modified.
 * @param createdBy The Id of the user who created the collection.
 * @param modifiedBy The Id of the user who last modified the collection.
 */


data class Transaction (

    /* The unique identifier for the transaction entity. */
    @Json(name = "id")
    val id: kotlin.String,

    /* Transaction status in Blockchain. Can be pending, success or fail */
    @Json(name = "status")
    val status: kotlin.String,

    /* Address of the sender of the transaction. */
    @Json(name = "from")
    val from: kotlin.String,

    /* Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction. */
    @Json(name = "to")
    val to: kotlin.String,

    /* Contract ID the transaction is associated with. */
    @Json(name = "contract_id")
    val contractId: kotlin.String,

    /* Contract address where the transaction happened. */
    @Json(name = "contract_address")
    val contractAddress: kotlin.String,

    /* Main blockchain identifier: Ethereum, Polygon, etc. */
    @Json(name = "blockchain")
    val blockchain: kotlin.String,

    /* Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc. */
    @Json(name = "chain_name")
    val chainName: kotlin.String,

    /* Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc. */
    @Json(name = "chain_id")
    val chainId: java.math.BigDecimal,

    /* Chain environment: Testnet, Mainnet, etc. */
    @Json(name = "environment")
    val environment: kotlin.String,

    /* Unique transaction hash in the blockchain. */
    @Json(name = "transaction_hash")
    val transactionHash: kotlin.String,

    /* Unique block number in the blockchain. */
    @Json(name = "block_number")
    val blockNumber: java.math.BigDecimal,

    /* Transaction type: Mint, Transfer, Award, Airdrop, etc. */
    @Json(name = "type")
    val type: kotlin.String,

    /* Function method name that was called in smart contract */
    @Json(name = "method")
    val method: kotlin.String,

    /* List of events that were emitted in the transaction */
    @Json(name = "events")
    val events: kotlin.collections.List<kotlin.String>,

    /* The unique identifier of the project that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
    @Json(name = "project_id")
    val projectId: kotlin.String,

    /* The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by project and helps with tracking and reporting. */
    @Json(name = "collection_id")
    val collectionId: kotlin.String,

    /* The unique identifier of the account that the transaction belongs to. */
    @Json(name = "account_id")
    val accountId: java.math.BigDecimal,

    /* The date when the collection was created. */
    @Json(name = "created_on")
    val createdOn: java.time.OffsetDateTime,

    /* The date when the collection was last modified. */
    @Json(name = "modified_on")
    val modifiedOn: java.time.OffsetDateTime,

    /* The Id of the user who created the collection. */
    @Json(name = "created_by")
    val createdBy: java.math.BigDecimal,

    /* The Id of the user who last modified the collection. */
    @Json(name = "modified_by")
    val modifiedBy: java.math.BigDecimal

)

