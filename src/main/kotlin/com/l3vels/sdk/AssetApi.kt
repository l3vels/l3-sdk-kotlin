/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.l3vels.sdk.model.Asset
import com.l3vels.sdk.model.AssetsResponseDto
import com.l3vels.sdk.model.UpdateAssetDto

import com.squareup.moshi.Json

import com.l3vels.sdk.infrastructure.ApiClient
import com.l3vels.sdk.infrastructure.ApiResponse
import com.l3vels.sdk.infrastructure.ClientException
import com.l3vels.sdk.infrastructure.ClientError
import com.l3vels.sdk.infrastructure.ServerException
import com.l3vels.sdk.infrastructure.ServerError
import com.l3vels.sdk.infrastructure.MultiValueMap
import com.l3vels.sdk.infrastructure.PartConfig
import com.l3vels.sdk.infrastructure.RequestConfig
import com.l3vels.sdk.infrastructure.RequestMethod
import com.l3vels.sdk.infrastructure.ResponseType
import com.l3vels.sdk.infrastructure.Success
import com.l3vels.sdk.infrastructure.toMultiValue

class AssetApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-dev.l3vels.xyz")
        }
    }

    /**
     * Count assets
     * Counts total assets in game.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId 
     * @return java.math.BigDecimal
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun countByGame(authorization: kotlin.String, projectId: kotlin.String) : java.math.BigDecimal {
        val localVarResponse = countByGameWithHttpInfo(authorization = authorization, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.math.BigDecimal
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Count assets
     * Counts total assets in game.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId 
     * @return ApiResponse<java.math.BigDecimal?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun countByGameWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String) : ApiResponse<java.math.BigDecimal?> {
        val localVariableConfig = countByGameRequestConfig(authorization = authorization, projectId = projectId)

        return request<Unit, java.math.BigDecimal>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation countByGame
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId 
     * @return RequestConfig
     */
    fun countByGameRequestConfig(authorization: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/asset/count/{project_id}".replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve asset by ID
     * Retrieve asset by ID in specific game/project. Example: Find asset AK-47 in game Call of Duty
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to find
     * @param projectId Game/project ID to find asset in
     * @return Asset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAssetById(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : Asset {
        val localVarResponse = getAssetByIdWithHttpInfo(authorization = authorization, id = id, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Asset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve asset by ID
     * Retrieve asset by ID in specific game/project. Example: Find asset AK-47 in game Call of Duty
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to find
     * @param projectId Game/project ID to find asset in
     * @return ApiResponse<Asset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAssetByIdWithHttpInfo(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : ApiResponse<Asset?> {
        val localVariableConfig = getAssetByIdRequestConfig(authorization = authorization, id = id, projectId = projectId)

        return request<Unit, Asset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAssetById
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to find
     * @param projectId Game/project ID to find asset in
     * @return RequestConfig
     */
    fun getAssetByIdRequestConfig(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/asset/{project_id}/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter order
     */
     enum class Order_getAssets(val value: kotlin.String) {
         @Json(name = "ASC") aSC("ASC"),
         @Json(name = "DESC") dESC("DESC")
     }

    /**
     * Retrieve assets
     * This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find assets in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter assets by collection. Example: Get assets only from Weapons collection. (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search assets by name (optional)
     * @param limit Number of assets to return per page (optional)
     * @param page Page number (optional)
     * @return AssetsResponseDto
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAssets(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String? = null, sort: kotlin.String? = null, order: Order_getAssets? = null, searchText: kotlin.String? = null, limit: java.math.BigDecimal? = null, page: java.math.BigDecimal? = null) : AssetsResponseDto {
        val localVarResponse = getAssetsWithHttpInfo(authorization = authorization, projectId = projectId, collectionId = collectionId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AssetsResponseDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve assets
     * This API method retrieves a list of assets that match the specified filter criteria. Developers can use this method to retrieve assets by name, description or other properties
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find assets in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter assets by collection. Example: Get assets only from Weapons collection. (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search assets by name (optional)
     * @param limit Number of assets to return per page (optional)
     * @param page Page number (optional)
     * @return ApiResponse<AssetsResponseDto?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAssetsWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String?, sort: kotlin.String?, order: Order_getAssets?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : ApiResponse<AssetsResponseDto?> {
        val localVariableConfig = getAssetsRequestConfig(authorization = authorization, projectId = projectId, collectionId = collectionId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return request<Unit, AssetsResponseDto>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAssets
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find assets in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter assets by collection. Example: Get assets only from Weapons collection. (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search assets by name (optional)
     * @param limit Number of assets to return per page (optional)
     * @param page Page number (optional)
     * @return RequestConfig
     */
    fun getAssetsRequestConfig(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String?, sort: kotlin.String?, order: Order_getAssets?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_id", listOf(projectId.toString()))
                if (collectionId != null) {
                    put("collection_id", listOf(collectionId.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (searchText != null) {
                    put("search_text", listOf(searchText.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/asset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update asset
     * Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to update
     * @param updateAssetDto 
     * @return Asset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateAsset(authorization: kotlin.String, id: kotlin.String, updateAssetDto: UpdateAssetDto) : Asset {
        val localVarResponse = updateAssetWithHttpInfo(authorization = authorization, id = id, updateAssetDto = updateAssetDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Asset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update asset
     * Update asset by ID in specific collection. Example: Update asset AK-47 in collection Weapons
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to update
     * @param updateAssetDto 
     * @return ApiResponse<Asset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateAssetWithHttpInfo(authorization: kotlin.String, id: kotlin.String, updateAssetDto: UpdateAssetDto) : ApiResponse<Asset?> {
        val localVariableConfig = updateAssetRequestConfig(authorization = authorization, id = id, updateAssetDto = updateAssetDto)

        return request<UpdateAssetDto, Asset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateAsset
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Asset ID to update
     * @param updateAssetDto 
     * @return RequestConfig
     */
    fun updateAssetRequestConfig(authorization: kotlin.String, id: kotlin.String, updateAssetDto: UpdateAssetDto) : RequestConfig<UpdateAssetDto> {
        val localVariableBody = updateAssetDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/asset/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
