/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.l3vels.sdk.model.CreatePlayerDto
import com.l3vels.sdk.model.Player
import com.l3vels.sdk.model.PlayerAsset

import com.squareup.moshi.Json

import com.l3vels.sdk.infrastructure.ApiClient
import com.l3vels.sdk.infrastructure.ApiResponse
import com.l3vels.sdk.infrastructure.ClientException
import com.l3vels.sdk.infrastructure.ClientError
import com.l3vels.sdk.infrastructure.ServerException
import com.l3vels.sdk.infrastructure.ServerError
import com.l3vels.sdk.infrastructure.MultiValueMap
import com.l3vels.sdk.infrastructure.PartConfig
import com.l3vels.sdk.infrastructure.RequestConfig
import com.l3vels.sdk.infrastructure.RequestMethod
import com.l3vels.sdk.infrastructure.ResponseType
import com.l3vels.sdk.infrastructure.Success
import com.l3vels.sdk.infrastructure.toMultiValue

class PlayerApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-dev.l3vels.xyz")
        }
    }

    /**
     * Retrieve player asset by ID
     * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return PlayerAsset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerAssetControllerPlayerAssetById(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : PlayerAsset {
        val localVarResponse = playerAssetControllerPlayerAssetByIdWithHttpInfo(authorization = authorization, id = id, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PlayerAsset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve player asset by ID
     * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return ApiResponse<PlayerAsset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerAssetControllerPlayerAssetByIdWithHttpInfo(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : ApiResponse<PlayerAsset?> {
        val localVariableConfig = playerAssetControllerPlayerAssetByIdRequestConfig(authorization = authorization, id = id, projectId = projectId)

        return request<Unit, PlayerAsset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerAssetControllerPlayerAssetById
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return RequestConfig
     */
    fun playerAssetControllerPlayerAssetByIdRequestConfig(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/player-asset/{project_id}/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve player assets
     * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.
     * @param assetId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param playerId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param sort Player asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param limit Number of player assets to return per page (optional)
     * @param page Page number (optional)
     * @return kotlin.collections.List<PlayerAsset>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerAssetControllerPlayerAssets(authorization: kotlin.String, projectId: kotlin.String, assetId: kotlin.String? = null, playerId: kotlin.String? = null, sort: kotlin.String? = null, order: kotlin.String? = null, limit: java.math.BigDecimal? = null, page: java.math.BigDecimal? = null) : kotlin.collections.List<PlayerAsset> {
        val localVarResponse = playerAssetControllerPlayerAssetsWithHttpInfo(authorization = authorization, projectId = projectId, assetId = assetId, playerId = playerId, sort = sort, order = order, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<PlayerAsset>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve player assets
     * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.
     * @param assetId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param playerId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param sort Player asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param limit Number of player assets to return per page (optional)
     * @param page Page number (optional)
     * @return ApiResponse<kotlin.collections.List<PlayerAsset>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerAssetControllerPlayerAssetsWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String, assetId: kotlin.String?, playerId: kotlin.String?, sort: kotlin.String?, order: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : ApiResponse<kotlin.collections.List<PlayerAsset>?> {
        val localVariableConfig = playerAssetControllerPlayerAssetsRequestConfig(authorization = authorization, projectId = projectId, assetId = assetId, playerId = playerId, sort = sort, order = order, limit = limit, page = page)

        return request<Unit, kotlin.collections.List<PlayerAsset>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerAssetControllerPlayerAssets
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc.
     * @param assetId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param playerId Game/project ID to find player assets in your game. Example: Fortnite, Minecraft, etc. (optional)
     * @param sort Player asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param limit Number of player assets to return per page (optional)
     * @param page Page number (optional)
     * @return RequestConfig
     */
    fun playerAssetControllerPlayerAssetsRequestConfig(authorization: kotlin.String, projectId: kotlin.String, assetId: kotlin.String?, playerId: kotlin.String?, sort: kotlin.String?, order: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_id", listOf(projectId.toString()))
                if (assetId != null) {
                    put("asset_id", listOf(assetId.toString()))
                }
                if (playerId != null) {
                    put("player_id", listOf(playerId.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/player-asset",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Create new player
     * Create new player for game/project. Example: Create new player Jack in game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param createPlayerDto 
     * @return Player
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerCreatePlayer(authorization: kotlin.String, createPlayerDto: CreatePlayerDto) : Player {
        val localVarResponse = playerControllerCreatePlayerWithHttpInfo(authorization = authorization, createPlayerDto = createPlayerDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Player
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create new player
     * Create new player for game/project. Example: Create new player Jack in game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param createPlayerDto 
     * @return ApiResponse<Player?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerCreatePlayerWithHttpInfo(authorization: kotlin.String, createPlayerDto: CreatePlayerDto) : ApiResponse<Player?> {
        val localVariableConfig = playerControllerCreatePlayerRequestConfig(authorization = authorization, createPlayerDto = createPlayerDto)

        return request<CreatePlayerDto, Player>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerCreatePlayer
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param createPlayerDto 
     * @return RequestConfig
     */
    fun playerControllerCreatePlayerRequestConfig(authorization: kotlin.String, createPlayerDto: CreatePlayerDto) : RequestConfig<CreatePlayerDto> {
        val localVariableBody = createPlayerDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/player",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Delete a Player
     * This API method allows developers to delete a Player by providing the ID of the Player. Once deleted, the Player and all associated assets will be removed from the system.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerDeletePlayer(authorization: kotlin.String) : Unit {
        val localVarResponse = playerControllerDeletePlayerWithHttpInfo(authorization = authorization)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a Player
     * This API method allows developers to delete a Player by providing the ID of the Player. Once deleted, the Player and all associated assets will be removed from the system.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerDeletePlayerWithHttpInfo(authorization: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = playerControllerDeletePlayerRequestConfig(authorization = authorization)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerDeletePlayer
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return RequestConfig
     */
    fun playerControllerDeletePlayerRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/player",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve players
     * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Player field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search player by name (optional)
     * @param limit Number of players to return per page (optional)
     * @param page Page number (optional)
     * @return kotlin.collections.List<Player>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerGetPlayers(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String? = null, order: kotlin.String? = null, searchText: kotlin.String? = null, limit: java.math.BigDecimal? = null, page: java.math.BigDecimal? = null) : kotlin.collections.List<Player> {
        val localVarResponse = playerControllerGetPlayersWithHttpInfo(authorization = authorization, projectId = projectId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Player>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve players
     * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Player field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search player by name (optional)
     * @param limit Number of players to return per page (optional)
     * @param page Page number (optional)
     * @return ApiResponse<kotlin.collections.List<Player>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerGetPlayersWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String?, order: kotlin.String?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : ApiResponse<kotlin.collections.List<Player>?> {
        val localVariableConfig = playerControllerGetPlayersRequestConfig(authorization = authorization, projectId = projectId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return request<Unit, kotlin.collections.List<Player>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerGetPlayers
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find player in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Player field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search player by name (optional)
     * @param limit Number of players to return per page (optional)
     * @param page Page number (optional)
     * @return RequestConfig
     */
    fun playerControllerGetPlayersRequestConfig(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String?, order: kotlin.String?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_id", listOf(projectId.toString()))
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (searchText != null) {
                    put("search_text", listOf(searchText.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/player",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve player by ID
     * Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Player ID that you created in your game/project. Example: Jack, George, etc.
     * @param projectId Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.
     * @return Player
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerPlayerById(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : Player {
        val localVarResponse = playerControllerPlayerByIdWithHttpInfo(authorization = authorization, id = id, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Player
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve player by ID
     * Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Player ID that you created in your game/project. Example: Jack, George, etc.
     * @param projectId Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.
     * @return ApiResponse<Player?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerPlayerByIdWithHttpInfo(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : ApiResponse<Player?> {
        val localVariableConfig = playerControllerPlayerByIdRequestConfig(authorization = authorization, id = id, projectId = projectId)

        return request<Unit, Player>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerPlayerById
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Player ID that you created in your game/project. Example: Jack, George, etc.
     * @param projectId Game/project ID to find asset in. Example: Call of Duty, Fortnite, etc.
     * @return RequestConfig
     */
    fun playerControllerPlayerByIdRequestConfig(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/player/{project_id}/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Count players
     * Count players in game. Example: count players in game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game Id
     * @return java.math.BigDecimal
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerPlayersCountByGameId(authorization: kotlin.String, projectId: kotlin.String) : java.math.BigDecimal {
        val localVarResponse = playerControllerPlayersCountByGameIdWithHttpInfo(authorization = authorization, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.math.BigDecimal
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Count players
     * Count players in game. Example: count players in game Call of Duty.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game Id
     * @return ApiResponse<java.math.BigDecimal?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerPlayersCountByGameIdWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String) : ApiResponse<java.math.BigDecimal?> {
        val localVariableConfig = playerControllerPlayersCountByGameIdRequestConfig(authorization = authorization, projectId = projectId)

        return request<Unit, java.math.BigDecimal>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerPlayersCountByGameId
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game Id
     * @return RequestConfig
     */
    fun playerControllerPlayersCountByGameIdRequestConfig(authorization: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/player/count/{project_id}".replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update an existing Player
     * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return Player
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun playerControllerUpdatePlayer(authorization: kotlin.String) : Player {
        val localVarResponse = playerControllerUpdatePlayerWithHttpInfo(authorization = authorization)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Player
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update an existing Player
     * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return ApiResponse<Player?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun playerControllerUpdatePlayerWithHttpInfo(authorization: kotlin.String) : ApiResponse<Player?> {
        val localVariableConfig = playerControllerUpdatePlayerRequestConfig(authorization = authorization)

        return request<Unit, Player>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation playerControllerUpdatePlayer
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return RequestConfig
     */
    fun playerControllerUpdatePlayerRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/player",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
