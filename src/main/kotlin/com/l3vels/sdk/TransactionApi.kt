/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.l3vels.sdk.model.Transaction

import com.squareup.moshi.Json

import com.l3vels.sdk.infrastructure.ApiClient
import com.l3vels.sdk.infrastructure.ApiResponse
import com.l3vels.sdk.infrastructure.ClientException
import com.l3vels.sdk.infrastructure.ClientError
import com.l3vels.sdk.infrastructure.ServerException
import com.l3vels.sdk.infrastructure.ServerError
import com.l3vels.sdk.infrastructure.MultiValueMap
import com.l3vels.sdk.infrastructure.PartConfig
import com.l3vels.sdk.infrastructure.RequestConfig
import com.l3vels.sdk.infrastructure.RequestMethod
import com.l3vels.sdk.infrastructure.ResponseType
import com.l3vels.sdk.infrastructure.Success
import com.l3vels.sdk.infrastructure.toMultiValue

class TransactionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-dev.l3vels.xyz")
        }
    }

    /**
     * Retrieve Transaction by ID
     * Retrieve transaction by ID
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return Transaction
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transactionControllerTransactionById(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : Transaction {
        val localVarResponse = transactionControllerTransactionByIdWithHttpInfo(authorization = authorization, id = id, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Transaction
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Transaction by ID
     * Retrieve transaction by ID
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return ApiResponse<Transaction?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun transactionControllerTransactionByIdWithHttpInfo(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : ApiResponse<Transaction?> {
        val localVariableConfig = transactionControllerTransactionByIdRequestConfig(authorization = authorization, id = id, projectId = projectId)

        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transactionControllerTransactionById
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id 
     * @param projectId 
     * @return RequestConfig
     */
    fun transactionControllerTransactionByIdRequestConfig(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/transaction/{project_id}/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter order
     */
     enum class Order_transactionControllerTransactions(val value: kotlin.String) {
         @Json(name = "ASC") aSC("ASC"),
         @Json(name = "DESC") dESC("DESC")
     }

    /**
     * Retrieve transactions
     * Retrieve all transactions.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find transactions in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)
     * @param playerId Player ID to mint to. You can provide player ID or player address (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search transactions by name (optional)
     * @param limit Number of transactions to return per page (optional)
     * @param page Page number (optional)
     * @return Transaction
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transactionControllerTransactions(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String? = null, playerId: kotlin.String? = null, sort: kotlin.String? = null, order: Order_transactionControllerTransactions? = null, searchText: kotlin.String? = null, limit: java.math.BigDecimal? = null, page: java.math.BigDecimal? = null) : Transaction {
        val localVarResponse = transactionControllerTransactionsWithHttpInfo(authorization = authorization, projectId = projectId, collectionId = collectionId, playerId = playerId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Transaction
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve transactions
     * Retrieve all transactions.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find transactions in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)
     * @param playerId Player ID to mint to. You can provide player ID or player address (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search transactions by name (optional)
     * @param limit Number of transactions to return per page (optional)
     * @param page Page number (optional)
     * @return ApiResponse<Transaction?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun transactionControllerTransactionsWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String?, playerId: kotlin.String?, sort: kotlin.String?, order: Order_transactionControllerTransactions?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : ApiResponse<Transaction?> {
        val localVariableConfig = transactionControllerTransactionsRequestConfig(authorization = authorization, projectId = projectId, collectionId = collectionId, playerId = playerId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return request<Unit, Transaction>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transactionControllerTransactions
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find transactions in your game. Example: Fortnite, Minecraft, etc.
     * @param collectionId Filter transactions by collection. Example: Get transactions only from Weapons collection. (optional)
     * @param playerId Player ID to mint to. You can provide player ID or player address (optional)
     * @param sort Asset field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search transactions by name (optional)
     * @param limit Number of transactions to return per page (optional)
     * @param page Page number (optional)
     * @return RequestConfig
     */
    fun transactionControllerTransactionsRequestConfig(authorization: kotlin.String, projectId: kotlin.String, collectionId: kotlin.String?, playerId: kotlin.String?, sort: kotlin.String?, order: Order_transactionControllerTransactions?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_id", listOf(projectId.toString()))
                if (collectionId != null) {
                    put("collection_id", listOf(collectionId.toString()))
                }
                if (playerId != null) {
                    put("player_id", listOf(playerId.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (searchText != null) {
                    put("search_text", listOf(searchText.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun transactionControllerWebhook(authorization: kotlin.String) : Unit {
        val localVarResponse = transactionControllerWebhookWithHttpInfo(authorization = authorization)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun transactionControllerWebhookWithHttpInfo(authorization: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = transactionControllerWebhookRequestConfig(authorization = authorization)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation transactionControllerWebhook
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @return RequestConfig
     */
    fun transactionControllerWebhookRequestConfig(authorization: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/transaction/webhook",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
