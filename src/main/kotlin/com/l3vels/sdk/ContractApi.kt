/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.l3vels.sdk.model.SetContractUriDto
import com.l3vels.sdk.model.SetSaleStatusDto

import com.squareup.moshi.Json

import com.l3vels.sdk.infrastructure.ApiClient
import com.l3vels.sdk.infrastructure.ApiResponse
import com.l3vels.sdk.infrastructure.ClientException
import com.l3vels.sdk.infrastructure.ClientError
import com.l3vels.sdk.infrastructure.ServerException
import com.l3vels.sdk.infrastructure.ServerError
import com.l3vels.sdk.infrastructure.MultiValueMap
import com.l3vels.sdk.infrastructure.PartConfig
import com.l3vels.sdk.infrastructure.RequestConfig
import com.l3vels.sdk.infrastructure.RequestMethod
import com.l3vels.sdk.infrastructure.ResponseType
import com.l3vels.sdk.infrastructure.Success
import com.l3vels.sdk.infrastructure.toMultiValue

class ContractApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-dev.l3vels.xyz")
        }
    }

    /**
     * Collection size
     * Get size of collection
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contractControllerCollectionSize(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : Unit {
        val localVarResponse = contractControllerCollectionSizeWithHttpInfo(authorization = authorization, collectionId = collectionId, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Collection size
     * Get size of collection
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun contractControllerCollectionSizeWithHttpInfo(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = contractControllerCollectionSizeRequestConfig(authorization = authorization, collectionId = collectionId, projectId = projectId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contractControllerCollectionSize
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return RequestConfig
     */
    fun contractControllerCollectionSizeRequestConfig(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("collection_id", listOf(collectionId.toString()))
                put("project_id", listOf(projectId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/contract/collection-size",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get Contract URI
     * Gets contract uri of contract
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contractControllerContractUri(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : Unit {
        val localVarResponse = contractControllerContractUriWithHttpInfo(authorization = authorization, collectionId = collectionId, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Contract URI
     * Gets contract uri of contract
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun contractControllerContractUriWithHttpInfo(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = contractControllerContractUriRequestConfig(authorization = authorization, collectionId = collectionId, projectId = projectId)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contractControllerContractUri
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param collectionId 
     * @param projectId 
     * @return RequestConfig
     */
    fun contractControllerContractUriRequestConfig(authorization: kotlin.String, collectionId: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("collection_id", listOf(collectionId.toString()))
                put("project_id", listOf(projectId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/contract/contract-uri",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update Contract URI
     * Update Contract URI
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setContractUriDto 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contractControllerSetContractUri(authorization: kotlin.String, setContractUriDto: SetContractUriDto) : Unit {
        val localVarResponse = contractControllerSetContractUriWithHttpInfo(authorization = authorization, setContractUriDto = setContractUriDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Contract URI
     * Update Contract URI
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setContractUriDto 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun contractControllerSetContractUriWithHttpInfo(authorization: kotlin.String, setContractUriDto: SetContractUriDto) : ApiResponse<Unit?> {
        val localVariableConfig = contractControllerSetContractUriRequestConfig(authorization = authorization, setContractUriDto = setContractUriDto)

        return request<SetContractUriDto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contractControllerSetContractUri
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setContractUriDto 
     * @return RequestConfig
     */
    fun contractControllerSetContractUriRequestConfig(authorization: kotlin.String, setContractUriDto: SetContractUriDto) : RequestConfig<SetContractUriDto> {
        val localVariableBody = setContractUriDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/contract/contract-uri",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update Sale status
     * Update Sale status to PAUSED, PRE_SALE or PUBLIC
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setSaleStatusDto 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun contractControllerSetSaleStatus(authorization: kotlin.String, setSaleStatusDto: SetSaleStatusDto) : Unit {
        val localVarResponse = contractControllerSetSaleStatusWithHttpInfo(authorization = authorization, setSaleStatusDto = setSaleStatusDto)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Sale status
     * Update Sale status to PAUSED, PRE_SALE or PUBLIC
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setSaleStatusDto 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun contractControllerSetSaleStatusWithHttpInfo(authorization: kotlin.String, setSaleStatusDto: SetSaleStatusDto) : ApiResponse<Unit?> {
        val localVariableConfig = contractControllerSetSaleStatusRequestConfig(authorization = authorization, setSaleStatusDto = setSaleStatusDto)

        return request<SetSaleStatusDto, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation contractControllerSetSaleStatus
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param setSaleStatusDto 
     * @return RequestConfig
     */
    fun contractControllerSetSaleStatusRequestConfig(authorization: kotlin.String, setSaleStatusDto: SetSaleStatusDto) : RequestConfig<SetSaleStatusDto> {
        val localVariableBody = setSaleStatusDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/contract/sale-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
