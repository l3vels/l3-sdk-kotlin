/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.l3vels.sdk

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.l3vels.sdk.model.Collection

import com.squareup.moshi.Json

import com.l3vels.sdk.infrastructure.ApiClient
import com.l3vels.sdk.infrastructure.ApiResponse
import com.l3vels.sdk.infrastructure.ClientException
import com.l3vels.sdk.infrastructure.ClientError
import com.l3vels.sdk.infrastructure.ServerException
import com.l3vels.sdk.infrastructure.ServerError
import com.l3vels.sdk.infrastructure.MultiValueMap
import com.l3vels.sdk.infrastructure.PartConfig
import com.l3vels.sdk.infrastructure.RequestConfig
import com.l3vels.sdk.infrastructure.RequestMethod
import com.l3vels.sdk.infrastructure.ResponseType
import com.l3vels.sdk.infrastructure.Success
import com.l3vels.sdk.infrastructure.toMultiValue

class CollectionApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api-dev.l3vels.xyz")
        }
    }

    /**
     * Count collections
     * Count total collections in game.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to count collections in
     * @return java.math.BigDecimal
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun countCollectionsByGameId(authorization: kotlin.String, projectId: kotlin.String) : java.math.BigDecimal {
        val localVarResponse = countCollectionsByGameIdWithHttpInfo(authorization = authorization, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.math.BigDecimal
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Count collections
     * Count total collections in game.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to count collections in
     * @return ApiResponse<java.math.BigDecimal?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun countCollectionsByGameIdWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String) : ApiResponse<java.math.BigDecimal?> {
        val localVariableConfig = countCollectionsByGameIdRequestConfig(authorization = authorization, projectId = projectId)

        return request<Unit, java.math.BigDecimal>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation countCollectionsByGameId
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to count collections in
     * @return RequestConfig
     */
    fun countCollectionsByGameIdRequestConfig(authorization: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/collection/count/{project_id}".replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve collection by ID
     * This API method retrieves a specific collection based on the unique identifier provided in the request.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Collection ID to find
     * @param projectId Game/project ID to find collection in
     * @return Collection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCollectionById(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : Collection {
        val localVarResponse = getCollectionByIdWithHttpInfo(authorization = authorization, id = id, projectId = projectId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Collection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve collection by ID
     * This API method retrieves a specific collection based on the unique identifier provided in the request.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Collection ID to find
     * @param projectId Game/project ID to find collection in
     * @return ApiResponse<Collection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCollectionByIdWithHttpInfo(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : ApiResponse<Collection?> {
        val localVariableConfig = getCollectionByIdRequestConfig(authorization = authorization, id = id, projectId = projectId)

        return request<Unit, Collection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCollectionById
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param id Collection ID to find
     * @param projectId Game/project ID to find collection in
     * @return RequestConfig
     */
    fun getCollectionByIdRequestConfig(authorization: kotlin.String, id: kotlin.String, projectId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/collection/{project_id}/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"project_id"+"}", encodeURIComponent(projectId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieve collections
     * This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Collection field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search collections by name (optional)
     * @param limit Number of collections to return per page (optional)
     * @param page Page number (optional)
     * @return kotlin.collections.List<Collection>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getCollections(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String? = null, order: kotlin.String? = null, searchText: kotlin.String? = null, limit: java.math.BigDecimal? = null, page: java.math.BigDecimal? = null) : kotlin.collections.List<Collection> {
        val localVarResponse = getCollectionsWithHttpInfo(authorization = authorization, projectId = projectId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Collection>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve collections
     * This API method retrieves a list of collections that match the specified filter criteria. Developers can use this method to retrieve collections by name, category, status, or other properties.
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Collection field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search collections by name (optional)
     * @param limit Number of collections to return per page (optional)
     * @param page Page number (optional)
     * @return ApiResponse<kotlin.collections.List<Collection>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getCollectionsWithHttpInfo(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String?, order: kotlin.String?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : ApiResponse<kotlin.collections.List<Collection>?> {
        val localVariableConfig = getCollectionsRequestConfig(authorization = authorization, projectId = projectId, sort = sort, order = order, searchText = searchText, limit = limit, page = page)

        return request<Unit, kotlin.collections.List<Collection>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getCollections
     *
     * @param authorization API key is associated with multiple projects. Please include it in to use developers API.
     * @param projectId Game/project ID to find collections in your game. Example: Fortnite, Minecraft, etc.
     * @param sort Collection field to sort by. You can sort by name, created_on and etc. (optional)
     * @param order Sort order (ASC for ascending or DESC for descending) (optional)
     * @param searchText Search collections by name (optional)
     * @param limit Number of collections to return per page (optional)
     * @param page Page number (optional)
     * @return RequestConfig
     */
    fun getCollectionsRequestConfig(authorization: kotlin.String, projectId: kotlin.String, sort: kotlin.String?, order: kotlin.String?, searchText: kotlin.String?, limit: java.math.BigDecimal?, page: java.math.BigDecimal?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("project_id", listOf(projectId.toString()))
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (order != null) {
                    put("order", listOf(order.toString()))
                }
                if (searchText != null) {
                    put("search_text", listOf(searchText.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        authorization.apply { localVariableHeaders["Authorization"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/collection",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
